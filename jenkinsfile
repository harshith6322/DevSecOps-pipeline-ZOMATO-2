pipeline{

    tools {
      nodejs 'nodejs_tool'
      jdk 'jdk_tool'
    }

    agent{
        label {
          label "slave-1"
          retries 3
        }
    }
    


    environment {
        SCANNER_HOME = tool 'mysonar_tool'
    }


    stages{
        stage("Clean Workspace"){

            steps{
                cleanWs()
            }
        }


        stage("Code"){

            steps{
                git branch: 'main', url: 'https://github.com/harshith6322/DevSecOps-pipeline-ZOMATO-2.git'
            }
        }


        stage("CQA"){

            steps{

                script{

                    withSonarQubeEnv("mysonar_server") {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=ZOMATO_PROJECT \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.min.js \
                         """  

                    }
                }
            }

        }


        stage("Quality Gate"){

            steps{

                script{

                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar_token'
                }
            }
        }


        stage("Install Dep"){

            steps{

                sh "npm install --frozen-lockfile && npm install --package-lock-only && npm run build && zip -r frontend-1.0.0.zip build/"
           
            }

        }


          stage("Audit"){

            steps {

               sh "npm audit --json > npm-audit-report.json"
            }
        }


        stage("Test"){

            steps{
                sh "npm test || true"
            }
        }


        stage("Nexus artifacts"){

            steps{

                nexusArtifactUploader artifacts: [[artifactId: 'react-frontend', classifier: '', file: 'frontend-1.0.0.zip', type: 'zip']], credentialsId: 'nexsus_token', groupId: 'com.mycompany.react', nexusUrl: '34.229.11.25:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'react_build_storage', version: 'v1'         
            }
        }

        // stage("Docker Image"){

        //     steps{
                

        //     }
        // }




        

    }
}