// @Library("email_lib") _ 
pipeline{

    tools {
      nodejs 'nodejs_tool'
      jdk 'jdk_tool'
    }

    agent "any"

    // agent{
    //     label {
    //       label "slave-1"
    //       retries 3
    //     }
    // }
    


    environment {
        SCANNER_HOME = tool 'mysonar_tool'

        USERNAME_DOCKER="harshithreddy6322"
        IMAGE_TAG="${BUILD_ID}"
        IMAGE_NAME="zomatoapp"
        RECIPIENTS="harshithreddy6322@gmail.com,noreply.jenkins2025@gmail.com"



    }


    stages{
        stage("Clean Workspace"){
            steps{
                cleanWs()
            }
        }


        stage("Code"){
            steps{
                git branch: 'main', url: 'https://github.com/harshith6322/DevSecOps-pipeline-ZOMATO-2.git'
            }
        }


        stage("CQA"){
            steps{

                script{

                    withSonarQubeEnv("mysonar_server") {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=ZOMATO_PROJECT \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.min.js \
                         """  

                    }
                }
            }

        }


        stage("Quality Gate"){
            steps{

                script{

                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar_token'
                }
            }
        }


        stage("Install Dep"){
            steps{

                sh '''
                    npm install
                '''
           
            }

        }


          stage("Audit"){
            steps {

               sh "npm audit --json > npm-audit-report.json || true"
            }
        }


        stage("Test"){
            steps{
                sh "npm test || true"
            }
        }


        // stage("Nexus artifacts"){
        //     steps{

        //         nexusArtifactUploader(nexusVersion: 'nexus3',protocol: 'http',nexusUrl: '34.229.11.25:8081',repository: 'react_build_storage',credentialsId: 'nexsus_token',groupId: '',version: "${IMAGE_TAG}",artifacts: [[artifactId: '',classifier: '',file: "frontend-${IMAGE_TAG}.zip",type: 'zip']]
        //         )         
        //     }
        // }


        stage('Build Docker Image') {
            steps {
               
                script{

                    withDockerRegistry(credentialsId: 'docker_token') {

                      sh "docker build -t ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG} ."
                       //
                      sh "docker push ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                   
                  }
                }
                   
            }
        }

        stage('Trivy') {
            steps {
               
                sh "trivy image ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG} >> trivy_scan_ouput.txt"
                
                   
            }
        }



        stage("Pull image"){
            steps{

                sh "docker pull ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker run -itd -p 80:80  --name ${IMAGE_NAME} ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                sh "sleep 2m"
                sh "docker rm -f ${IMAGE_NAME}"

            }

        }

    }

       post {
        success {
            emailext(
                subject: "✅ SUCCESS: ${JOB_NAME} #${BUILD_NUMBER}",
                body: getEmailBody("SUCCESS"),
                mimeType: 'text/html',
                to: "${RECIPIENTS}",
                attachLog: true,
                compressLog: true,
                attachmentsPattern: 'npm-audit-report.json,trivy_scan_ouput.txt' 
               
            )
        }
        failure {
            emailext(
                subject: "❌ FAILED: ${JOB_NAME} #${BUILD_NUMBER}",
                body: getEmailBody("FAILURE"),
                mimeType: 'text/html',
                to: "${RECIPIENTS}",
                attachLog: true,
                compressLog: true,
                attachmentsPattern: 'npm-audit-report.json,trivy_scan_ouput.txt' 
                
                
            )
        }

        aborted{


            emailext(
                subject: "⚠️ Aborted: ${JOB_NAME} #${BUILD_NUMBER}",
                body: getEmailBody("FAILURE"),
                mimeType: 'text/html',
                to: "${RECIPIENTS}",
                attachLog: true,
                compressLog: true,
                attachmentsPattern: 'npm-audit-report.json,trivy_scan_ouput.txt' 
                
                
            )


        }
    }
}
// Function to load HTML email body
@NonCPS
def getEmailBody(status) {
    return """
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; background:#f6f9fc; padding:20px; }
        .container { max-width:600px; margin:auto; background:#fff; border-radius:8px;
                     box-shadow:0 2px 8px rgba(0,0,0,0.1); padding:20px; }
        h2 { text-align:center; }
        .status-success { color: #2e7d32; font-weight: bold; }
        .status-failed { color: #c62828; font-weight: bold; }
        .button { display:inline-block; padding:10px 20px; margin-top:10px; 
                  font-size:14px; font-weight:bold; text-decoration:none;
                  border-radius:4px; color:#fff; }
        .btn-success { background:#2e7d32; }
        .btn-failed { background:#c62828; }
        .footer { text-align:center; font-size:12px; color:#777; margin-top:20px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h2>CI/CD Pipeline Report</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Branch:</strong> ${env.BRANCH_NAME ?: 'N/A'}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span class="${status == 'SUCCESS' ? 'status-success' : 'status-failed'}">${status}</span></p>
        <a class="button ${status == 'SUCCESS' ? 'btn-success' : 'btn-failed'}" href="${env.BUILD_URL}">View Build Logs</a>
        <div class="footer">
          <p>This is an automated message from Jenkins CI/CD</p>
          
        </div>
      </div>
    </body>
    </html>
    """
} 





   

