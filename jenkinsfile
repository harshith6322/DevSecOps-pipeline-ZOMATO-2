// @Library("email_lib") _ 
pipeline{

    tools {
      nodejs 'nodejs_tool'
      jdk 'jdk_tool'
    }

    agent "any"

    // agent{
    //     label {
    //       label "slave-1"
    //       retries 3
    //     }
    // }
    


    environment {
        SCANNER_HOME = tool 'mysonar_tool'

        USERNAME_DOCKER="harshithreddy6322"
        IMAGE_TAG="${BUILD_ID}"
        IMAGE_NAME="zomatoapp"



    }


    stages{
        stage("Clean Workspace"){
            steps{
                cleanWs()
            }
        }


        stage("Code"){
            steps{
                git branch: 'main', url: 'https://github.com/harshith6322/DevSecOps-pipeline-ZOMATO-2.git'
            }
        }


        stage("CQA"){
            steps{

                script{

                    withSonarQubeEnv("mysonar_server") {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=ZOMATO_PROJECT \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.min.js \
                         """  

                    }
                }
            }

        }


        stage("Quality Gate"){
            steps{

                script{

                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar_token'
                }
            }
        }


        stage("Install Dep"){
            steps{

                sh '''
                    npm install
                '''
           
            }

        }


          stage("Audit"){
            steps {

               sh "npm audit --json > npm-audit-report.json || true"
            }
        }


        stage("Test"){
            steps{
                sh "npm test || true"
            }
        }


        // stage("Nexus artifacts"){
        //     steps{

        //         nexusArtifactUploader(nexusVersion: 'nexus3',protocol: 'http',nexusUrl: '34.229.11.25:8081',repository: 'react_build_storage',credentialsId: 'nexsus_token',groupId: '',version: "${IMAGE_TAG}",artifacts: [[artifactId: '',classifier: '',file: "frontend-${IMAGE_TAG}.zip",type: 'zip']]
        //         )         
        //     }
        // }


        stage('Build Docker Image') {
            steps {
               
                script{

                    withDockerRegistry(credentialsId: 'docker_token') {

                      sh "docker build -t ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG} ."
                       //
                      sh "docker push ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                   
                  }
                }
                   
            }
        }

        stage('Trivy') {
            steps {
               
                sh "trivy image ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG} >> trivy_scan_ouput.txt"
                
                   
            }
        }



        stage("Pull image"){
            steps{

                sh "docker pull ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker run -itd -p 80:80 ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"
                sh "sleep 2m"
                sh "docker rm -f ${USERNAME_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}"

            }

        }

    }

   post {
      always {
        emailext(
           subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} - ${currentBuild.currentResult}",
            body: """<html>
            <body>
             <p>Build Status: <b>${currentBuild.currentResult}</b></p>
             <p>Build Number: ${env.BUILD_NUMBER}</p>
             <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
            </body>
            </html>""",
         to: 'harshithreddy6322@gmail.com',
        from: 'noreply.jenkins2025@gmail.com',
        replyTo: 'noreply.jenkins2025@gmail.com',
        mimeType: 'text/html',
        attachmentsPattern: 'npm-audit-report.json,trivy_scan_ouput.txt', // comma-separated
        attachLog: false
    )
  }
}

}