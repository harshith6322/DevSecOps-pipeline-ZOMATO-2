pipeline{

    tools {
      nodejs 'nodejs_tool'
      jdk 'jdk_tool'
    }

    agent{
        label {
          label "slave-1"
          retries 3
        }
    }
    


    environment {
        SCANNER_HOME = tool 'mysonar_tool'
    }


    stages{
        stage("Clean Workspace"){

            steps{
                cleanWs()
            }
        }

        stage("Code"){

            steps{
                git branch: 'main', url: 'https://github.com/harshith6322/DevSecOps-pipeline-ZOMATO-2.git'
            }
        }

        stage("CQA"){

            steps{

                script{

                    withSonarQubeEnv("mysonar_server") {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=ZOMATO_PROJECT \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.min.js \
                         """  

                    }
                }
            }

        }

        stage("Quality Gate"){

            steps{

                script{

                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar_token'
                }
            }
        }


        stage("OWASP"){

            steps {
               dependencyCheck additionalArguments: '''--scan ./ --format XML --format HTML --out ./odc-reports''', odcInstallation: 'dpc_tool'
               dependencyCheckPublisher pattern: 'odc-reports/dependency-check-report.xml'
               archiveArtifacts artifacts: 'odc-reports/dependency-check-report.html', fingerprint: true
            }
        }

        stage("Install dep"){
            steps{
                sh "npm install --frozen-lockfile"
            }

        }

        stage("Nexus artifacts"){

            steps{
                sh "echo storing builds..."
            }
        }


        

    }
}